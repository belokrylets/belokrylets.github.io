{"version":3,"file":"static/js/8.43a98ba7.chunk.js","mappings":"kKACA,QAA6B,+B,4CCMtB,MAAMA,EAAgBA,KACzB,MAAMC,GAAWC,EAAAA,EAAAA,MACVC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,CAC7BC,OAAQ,KAGNC,GAASC,EAAAA,EAAAA,cACX,CAACC,EAAcC,KACXN,EAAQ,IAAKD,EAAM,CAACM,GAAOC,GAAQ,GAEvC,CAACP,IAECQ,GAAMC,EAAAA,EAAAA,GAAeC,EAAAA,GAAeC,cACpC,WAAEC,EAAU,UAAEC,IAAcJ,EAAAA,EAAAA,IAAgBK,GAAUA,EAAMC,SAE5DC,GAAiBX,EAAAA,EAAAA,cAAY,KAC/BP,GAASmB,EAAAA,EAAAA,GAAcjB,EAAKG,QAAQ,GACrC,CAACH,EAAMF,IAEJoB,ECxBwBC,KAC9B,MAAMC,GAAWC,EAAAA,EAAAA,QAAoC,MAC/CH,GAAiBG,EAAAA,EAAAA,QAA8B,MAE/CC,GAAiBjB,EAAAA,EAAAA,cAClBkB,IACOH,EAASI,SAASJ,EAASI,QAAQC,aAEvCL,EAASI,QAAU,IAAIE,sBAClBC,IACOA,EAAQ,GAAGC,gBACXT,GACJ,GAEJ,CACIU,KAAM,KACNC,WAAY,MACZC,UAAW,IAIfR,GACAH,EAASI,QAAQQ,QAAQT,GAG7BL,EAAeM,QAAUD,CAAI,GAEjC,CAACJ,IAWL,OARAc,EAAAA,EAAAA,YAAU,IACC,KACCb,EAASI,SACTJ,EAASI,QAAQC,YACrB,GAEL,IAEIH,CAAc,EDdEY,CAAkBlB,GACnCmB,GAAW9B,EAAAA,EAAAA,cAAY,KACzBP,GAASsC,EAAAA,EAAAA,GAAUpC,EAAKG,QAAQ,GACjC,CAACH,EAAMF,IAEJuC,GAAUhC,EAAAA,EAAAA,cAAY,KACxBJ,EAAQ,CAAEE,OAAQ,KAClBL,EAASwC,EAAAA,GAAcC,YAAY,GACpC,CAACzC,IACJ,MAAO,CACHM,SACAJ,OACAmC,WACAE,UACA7B,MACAK,YACAG,iBACAE,iBACAN,aACH,EE5CL,EAA4B,6B,aCOrB,MAAM4B,GAAYC,EAAAA,EAAAA,OAAMC,IAC3B,MAAM,SAAEC,GAAaD,EACrB,OAAOE,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,IAAWC,GAAeJ,SAAEA,GAAe,ICTtE,EAAyB,uBAAzB,EAA2D,yBAA3D,EAA4F,sBCA5F,GAAgB,aAAe,4BAA4B,SAAW,wBAAwB,UAAY,yBAAyB,MAAQ,sBCmB9HK,GAAQP,EAAAA,EAAAA,OAAMC,IACvB,MAAM,QACFO,EAAO,QACPZ,EAAO,MACP9B,EAAK,KACLD,EAAI,YACJ4C,EAAW,SACXC,EAAQ,UACRC,EAAS,SACTC,GACAX,EAEEY,GAAUjD,EAAAA,EAAAA,cACXkD,IACG,MAAM,KAAEjD,EAAI,MAAEC,GAAUgD,EAAMC,OAC1BL,GAAUA,EAAS7C,EAAMC,EAAM,GAEvC,CAAC4C,IAGL,OACIP,EAAAA,EAAAA,KAAA,SAAOC,UAAWC,IAAWC,EAAIU,MAAO,CAACR,IAAUN,UAC/Ce,EAAAA,EAAAA,MAAA,OAAKb,UAAWE,EAAIY,aAAahB,SAAA,CAC5BU,IAAYT,EAAAA,EAAAA,KAAA,OAAKC,UAAWE,EAAIM,SAASV,SAAEU,KAC5CT,EAAAA,EAAAA,KAAA,SACIO,SAAUG,EACVJ,YAAaA,EACb5C,KAAMA,EACNC,MAAOA,EACPsC,UAAWC,IAAWC,EAAIC,SAE7BI,GAAuB,KAAV7C,IACVqC,EAAAA,EAAAA,KAAA,OAAKgB,QAASvB,EAASQ,UAAWE,EAAIK,UAAUT,SAC3CS,QAIT,I,sBCxCT,MAAMS,GAASpB,EAAAA,EAAAA,OAAMC,IACxB,MAAM,SAAES,EAAQ,MAAE5C,EAAK,SAAE4B,EAAQ,QAAEc,EAAO,UAAEa,EAAS,QAAEzB,GAAYK,GAC7D,WAAEqB,GChBaC,MACrB,MAAMC,GAAYxD,EAAAA,EAAAA,GAAeC,EAAAA,GAAewD,YAC1C,cAAEC,IAAkB1D,EAAAA,EAAAA,IAAgBK,GAAUA,EAAMC,SAI1D,MAAO,CAAEgD,aAFYE,EAAUG,QAAUD,EAEpB,EDUEH,GAEvB,OACIN,EAAAA,EAAAA,MAAA,QACIb,UAAWC,IAAWC,EAAY,CAACE,GAAU,CACzC,CAACF,GAAegB,IACjBpB,SAAA,EAEHC,EAAAA,EAAAA,KAACI,EAAK,CACFK,UAAUT,EAAAA,EAAAA,KAACyB,EAAAA,EAAI,CAACC,SAAU,WAC1BlB,WAAWR,EAAAA,EAAAA,KAACyB,EAAAA,EAAI,CAACC,SAAU,eAC3BhE,KAAMwD,EACNvD,MAAOA,EACP4C,SAAUA,EACVD,YAAa,4HACbD,QAASF,EACTV,QAASA,KAEbO,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,CAACC,SAAoB,KAAVjE,EAAcqD,QAASzB,EAASQ,SAAC,2CAGhD,IEGf,GA/BmBF,EAAAA,EAAAA,OAAKgC,IAAmC,IAAlC,QAAExB,GAA0BwB,EACjD,MAAM,KACFzE,EAAI,OACJI,EAAM,SACN+B,EAAQ,QACRE,EAAO,IACP7B,EAAG,eACHU,EAAc,WACdN,EAAU,UACVC,GACAhB,IAEJ,OACI+C,EAAAA,EAAAA,KAACJ,EAAS,CAAAG,UACNe,EAAAA,EAAAA,MAAA,QAAMb,UAAWC,IAAWC,EAAgB,CAACE,IAAUN,SAAA,EACnDC,EAAAA,EAAAA,KAACiB,EAAM,CACHxB,QAASA,EACT9B,MAAOP,EAAKG,OACZgD,SAAU/C,EACV+B,SAAUA,EACV2B,UAAW,YAEflB,EAAAA,EAAAA,KAAC8B,EAAAA,GAAM,MACJlE,IAAQI,IAAeC,IACtB+B,EAAAA,EAAAA,KAAA,OAAK+B,IAAKzD,QAGV,G","sources":["webpack://image-finder/./src/pages/SearchPage/ui/SearchPage.module.scss?776d","pages/SearchPage/ui/useSearchPage.tsx","Shared/lib/hooks/useInfinityScroll.tsx","webpack://image-finder/./src/Shared/ui/Container/Container.module.scss?f940","Shared/ui/Container/Container.tsx","features/ Finder/ui/Finder.module.scss","webpack://image-finder/./src/Shared/ui/Input/Input.module.scss?80a8","Shared/ui/Input/Input.tsx","features/ Finder/ui/Finder.tsx","features/ Finder/ui/useFinder.tsx","pages/SearchPage/ui/SearchPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"SearchPage\":\"SearchPage_SearchPage__Bq9qW\"};","import { useAppDispatch, useAppSelector } from 'Shared/lib/hooks/redux';\nimport { useCallback, useState } from 'react';\nimport { getImages } from 'entities/Images/model/services/getImages/getImages';\nimport { imagesActions, imagesSelector } from 'entities/Images';\nimport { useInfiniteScroll } from 'Shared/lib/hooks/useInfinityScroll';\nimport { getMoreImages } from 'entities/Images/model/services/getMoreImages/getMoreImages';\n\nexport const useSearchPage = () => {\n    const dispatch = useAppDispatch();\n    const [form, setForm] = useState({\n        search: '',\n    });\n\n    const onForm = useCallback(\n        (name: string, value: string) => {\n            setForm({ ...form, [name]: value });\n        },\n        [form],\n    );\n    const ids = useAppSelector(imagesSelector.selectTotal);\n    const { isLastPage, isLoading } = useAppSelector((state) => state.images);\n\n    const onLoadNextPart = useCallback(() => {\n        dispatch(getMoreImages(form.search));\n    }, [form, dispatch]);\n\n    const lastElementRef = useInfiniteScroll(onLoadNextPart);\n    const onSubmit = useCallback(() => {\n        dispatch(getImages(form.search));\n    }, [form, dispatch]);\n\n    const onClear = useCallback(() => {\n        setForm({ search: '' });\n        dispatch(imagesActions.removeAll());\n    }, [dispatch]);\n    return {\n        onForm,\n        form,\n        onSubmit,\n        onClear,\n        ids,\n        isLoading,\n        onLoadNextPart,\n        lastElementRef,\n        isLastPage,\n    };\n};\n","import { useEffect, useRef, useCallback } from 'react';\n\nexport const useInfiniteScroll = (callback: () => void) => {\n    const observer = useRef<IntersectionObserver | null>(null);\n    const lastElementRef = useRef<HTMLDivElement | null>(null);\n\n    const setLastElement = useCallback(\n        (node: HTMLDivElement | null) => {\n            if (observer.current) observer.current.disconnect();\n\n            observer.current = new IntersectionObserver(\n                (entries) => {\n                    if (entries[0].isIntersecting) {\n                        callback();\n                    }\n                },\n                {\n                    root: null,\n                    rootMargin: '0px',\n                    threshold: 1.0,\n                },\n            );\n\n            if (node) {\n                observer.current.observe(node);\n            }\n\n            lastElementRef.current = node;\n        },\n        [callback],\n    );\n\n    useEffect(() => {\n        return () => {\n            if (observer.current) {\n                observer.current.disconnect();\n            }\n        };\n    }, []);\n\n    return setLastElement;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Container_container__+kXBu\"};","import React, { memo, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport cls from './Container.module.scss';\n\ninterface ContainerProps {\n    children: ReactNode;\n}\n\nexport const Container = memo((props: ContainerProps) => {\n    const { children } = props;\n    return <div className={classNames(cls.container)}>{children}</div>;\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"Finder\":\"Finder_Finder__Fk+iD\",\"searched\":\"Finder_searched__ZyI02\",\"input\":\"Finder_input__6FYu-\"};","// extracted by mini-css-extract-plugin\nexport default {\"InputWrapper\":\"Input_InputWrapper__9imfX\",\"leftIcon\":\"Input_leftIcon__fyZOb\",\"rightIcon\":\"Input_rightIcon__PSyac\",\"Input\":\"Input_Input__DaEGK\"};","import React, { InputHTMLAttributes, memo, useCallback } from 'react';\nimport classNames from 'classnames';\nimport cls from './Input.module.scss';\n\ntype HTMLInputProps = Omit<\n    InputHTMLAttributes<HTMLInputElement>,\n    'value' | 'onChange'\n>;\n\ninterface InputProps extends HTMLInputProps {\n    classes?: string;\n    value?: string;\n    name?: string;\n    placeholder?: string;\n    onChange?: (name: string, value: string) => void;\n    leftIcon?: React.ReactNode;\n    rightIcon?: React.ReactNode;\n    onClear?: () => void;\n}\n\nexport const Input = memo((props: InputProps) => {\n    const {\n        classes,\n        onClear,\n        value,\n        name,\n        placeholder,\n        onChange,\n        rightIcon,\n        leftIcon,\n    } = props;\n\n    const onInput = useCallback(\n        (event: React.ChangeEvent<HTMLInputElement>) => {\n            const { name, value } = event.target;\n            if (onChange) onChange(name, value);\n        },\n        [onChange],\n    );\n\n    return (\n        <label className={classNames(cls.label, [classes])}>\n            <div className={cls.InputWrapper}>\n                {leftIcon && <div className={cls.leftIcon}>{leftIcon}</div>}\n                <input\n                    onChange={onInput}\n                    placeholder={placeholder}\n                    name={name}\n                    value={value}\n                    className={classNames(cls.Input)}\n                />\n                {rightIcon && value !== '' && (\n                    <div onClick={onClear} className={cls.rightIcon}>\n                        {rightIcon}\n                    </div>\n                )}\n            </div>\n        </label>\n    );\n});\n","import React, { memo } from 'react';\nimport classNames from 'classnames';\nimport cls from './Finder.module.scss';\nimport { useFinder } from './useFinder';\nimport { Input } from 'Shared/ui/Input';\nimport { Button } from 'Shared/ui/Button';\nimport { Icon } from 'Shared/ui/Icon';\n\ninterface FinderProps {\n    classes?: string;\n    value: string;\n    onChange: (name: string, value: string) => void;\n    onSubmit: () => void;\n    onClear: () => void;\n    inputName?: string;\n}\n\nexport const Finder = memo((props: FinderProps) => {\n    const { onChange, value, onSubmit, classes, inputName, onClear } = props;\n    const { isSearched } = useFinder();\n\n    return (\n        <form\n            className={classNames(cls.Finder, [classes], {\n                [cls.searched]: isSearched,\n            })}\n        >\n            <Input\n                leftIcon={<Icon iconName={'search'} />}\n                rightIcon={<Icon iconName={'clearInput'} />}\n                name={inputName}\n                value={value}\n                onChange={onChange}\n                placeholder={'Телефоны, яблоки, груши...'}\n                classes={cls.input}\n                onClear={onClear}\n            />\n            <Button disabled={value === ''} onClick={onSubmit}>\n                Искать\n            </Button>\n        </form>\n    );\n});\n","import { useAppSelector } from 'Shared/lib/hooks/redux';\nimport { imagesSelector } from 'entities/Images';\n\nexport const useFinder = () => {\n    const imagesIds = useAppSelector(imagesSelector.selectIds);\n    const { isEmptyResult } = useAppSelector((state) => state.images);\n\n    const isSearched = !!imagesIds.length || isEmptyResult;\n\n    return { isSearched };\n};\n","import React, { memo } from 'react';\nimport classNames from 'classnames';\nimport cls from './SearchPage.module.scss';\nimport { useSearchPage } from './useSearchPage';\nimport { Images } from 'entities/Images';\nimport { Container } from 'Shared/ui/Container';\nimport { Finder } from 'features/ Finder';\n\ninterface SearchPageProps {\n    classes?: string;\n}\n\nconst SearchPage = memo(({ classes }: SearchPageProps) => {\n    const {\n        form,\n        onForm,\n        onSubmit,\n        onClear,\n        ids,\n        lastElementRef,\n        isLastPage,\n        isLoading,\n    } = useSearchPage();\n\n    return (\n        <Container>\n            <main className={classNames(cls.SearchPage, [classes])}>\n                <Finder\n                    onClear={onClear}\n                    value={form.search}\n                    onChange={onForm}\n                    onSubmit={onSubmit}\n                    inputName={'search'}\n                />\n                <Images />\n                {!!ids && !isLastPage && !isLoading && (\n                    <div ref={lastElementRef}></div>\n                )}\n            </main>\n        </Container>\n    );\n});\n\nexport default SearchPage;\n"],"names":["useSearchPage","dispatch","useAppDispatch","form","setForm","useState","search","onForm","useCallback","name","value","ids","useAppSelector","imagesSelector","selectTotal","isLastPage","isLoading","state","images","onLoadNextPart","getMoreImages","lastElementRef","callback","observer","useRef","setLastElement","node","current","disconnect","IntersectionObserver","entries","isIntersecting","root","rootMargin","threshold","observe","useEffect","useInfiniteScroll","onSubmit","getImages","onClear","imagesActions","removeAll","Container","memo","props","children","_jsx","className","classNames","cls","Input","classes","placeholder","onChange","rightIcon","leftIcon","onInput","event","target","label","_jsxs","InputWrapper","onClick","Finder","inputName","isSearched","useFinder","imagesIds","selectIds","isEmptyResult","length","Icon","iconName","Button","disabled","_ref","Images","ref"],"sourceRoot":""}